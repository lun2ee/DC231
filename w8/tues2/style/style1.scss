* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  font-family: "Spoqa Han Sans Neo", "sans-serif";
}
img {
  display: block;
  //   : 카드 ui에 이미지와 텍스트 사이 gap을 정리해주기 = 이미지 속성을 inline 에서 block 으로 바꿔주기
}
.container {
  margin-inline: auto;
  padding-inline: 2rem;
  max-width: 60rem;
  // 최대 너비값 기준을 지정해주기 960px 까지
}
@media (width < 37.5rem) {
  .container {
    padding-inline: 1rem;
  }
}
.wrapper {
  padding-block: 2rem;
  min-height: 100dvh;
  // vh= 브라우저 창 높이를 길게..>?
}
#section1 {
  // id section1 의 wrapper 안에 속한 class: card 속성에 영향을 줌.
  .wrapper {
    // position: relative;
    // card3 의 position 값을 body 가 아닌 wrapper 에서부터 적용을 하고싶다면!
    // position: fixed; 는 wrapper 에다가 position: relative 를 넣어주어도 반응하지 않는다
    display: flex;
    align-items: flex-start;
    gap: 1rem;
  }
}
#card3 {
  // position: static;
  // 아무런 변화가 없음을 볼 수 있음 (기본임)
  // position: relative;
  // top , left 값에 따라 움직여지는 것을 볼 수 있음
  // position: absolute;
  // 다른 position:relative 값을 주지 않는 이상 body에서부터 적용이 된다.
  // position: fixed;
  // 창의 왼쪽 위에서부터 0,0을 기준으로 해서 묶이게 된다.
  // 스크롤을 했을때 남아있는 놈 (계속 쫓아오는 사이드바 같은 놈 또는 따라오는 광고 등)
  position: sticky;
  // wrapper 영역 안쪽에서는 계속 스크롤이 가능하나, 영역 끝나는 지점에서는 갇혀서 따라오지 않는 놈
  // 위 아래 뿐만 아니라 좌우로도 sticky 는 가능함
  top: 5px;
  // position: sticky 인 경우 top 값을 유지한 여백으로 내려오게 된다.
  // bottom 값을 입력해도 성립이 되지않음.
  left: 40px;
}
#card2 {
  position: relative;
  // position: sticky;
  // position: static;
  // position: fixed;
  // position 이 그냥 static 일 때는 숫자 원형이 다른 곳으로 튕겨져 나간다.
  // top: 20px;
  // left: 40px;
}
.card {
  cursor: pointer;
  max-width: 18.75rem;

  &__roundedBorder {
    // background-color: white;
    //   -> 작업하기 편리하게 칼라는 눈에 잘 보이는 칼라로 설정
    //   이미지와 텍스트 사이에 작은 gap 이 생기게 된다 -> descenders 처리하는것 때문
    // : 이 문제를 해결하기 위해서는 이미지를 inline 요소가 아닌, box 요소로 처리해주면 됨.
    border: 0.0625rem solid #ccc;
    border-radius: 0.5rem;
    overflow: hidden;
    //   border 값을 카드 ui 에 넣어주었을때 이미지가 카드Ui에 포함되지 않은 이슈 해결
    transition: transform 500ms ease,
      box-shadow 500ms ease;
    // 카드의 트랜지션이 뭉근~하게 움직여짐
    // or
    // transition: all 500ms ease ; 서로 다른 시간에 다른 타이밍 functiond 으로 움직일려면 이런 방식은 안됨
    // 대신에 동일한 function으로 움직이려고 한다면 all 사용 가능하다
    &:hover {
      transform: translateY(-0.125rem) scale(1.01);
      // scale 1.01 은 1퍼센트 커지는 것, 1.1 은 10퍼센트 커지는것 그리고 Y로 2px 정도 이동시켜준것..
      // 그림자 넣기
      box-shadow: 0 0.5rem 0.75rem 0.375rem
          rgba(0, 0, 0, 0.15),
        0 0.25rem rgba(0, 0, 0, 0.3);
      .card {
        &__img {
          filter: grayscale(0%);
          // 카드 위에 hover를 했을떄 grayscale 이 0으로 빠지게 된다!
        }
      }
    }
  }
  &__img {
    width: 100%;
    aspect-ratio: 4 / 3;
    // 가로 / 세로 비율을 일부로 지정해주고 싶다면 -> aspect-ratio
    // 이미지가 왜곡되지 않은 상태로 들어가게 된다
    object-fit: cover;
    // 이미지에 틴트를 먹이고 싶다면,,,
    filter: grayscale(100%);
    transition: filter 500ms ease;
    // 이미지 필터에도 ease 를 적용
    &:hover {
      filter: grayscale(0);
      // 요 방법은 hover 를 했을때 이미지가 grayscale 에서 칼라로 변경
    }
  }
  &__text {
    padding: 1rem;
    h3 {
      font-size: 1.25rem;
      line-height: 1.75rem;
      //   background-color: antiquewhite;
      //   : 글자 한 줄에 대한 높이 값을 설정하는 것.
      font-weight: bold;
      margin-bottom: 0.5rem;
    }
    p {
      $lineHeightVal: 1.5rem;
      $clampLine: 4;
      //   : 몇 줄을 쓸지 설정할 수 있음 (숫자 설정 가능)
      //   : text-overflow ellipsis 두줄 인터넷에 서칭
      line-height: $lineHeightVal;
      //   p 태그의 글자 간격을 줄 수 있음. 더 높은 값으로 line-height 설정하면 됨.
      overflow: hidden;
      //   :글자가 넘치면 감춰라
      text-overflow: ellipsis;
      //   :글자가 넘어가면 ... 으로 해주는 기능
      //   white-space: nowrap;
      //   : 위에 두 줄의 속성을 적용시키기 위해서 입력해야하는 속성 (한줄 입력하고 ... 하게 하려면 white-space)
      //   그렇다면 여러줄일때 ... 입력을 하고 싶다면?
      display: -moz-box;
      display: -webkit-box;
      -moz-box-orient: vertical;
      -webkit-box-orient: vertical;
      -moz-line-clamp: 5;
      -webkit-line-clamp: $clampLine;
      max-height: $clampLine * $lineHeightVal;
      //   이만큼의 속성을,,, 넣어줘야한다는것,, :이것이 하드코딩하는 방법임.
    }
  }
  &__buttons {
    padding: 1rem;
    display: flex;
    // inline으로 일렬로 정렬
    justify-content: end;
    // 맨 오른쪽에 붙음
    gap: 0.5rem;
    // : 카드에 담기 , 더 보기 사이 값을 줌 8px
  }
}
.button {
  cursor: pointer;
  padding: 0.5rem 1rem;
  //   : 위 아래 8px(0.5rem)/ 좌우에 16px (1rem)
  font-size: 0.875rem;
  line-height: 0.875rem;
  font-weight: bold;
  background-color: blue;
  color: rgba($color: #ffffff, $alpha: 0.87);
  border-radius: 62.4375rem;
  transition: background-color 300ms ease;
  //  천천히 버튼에 색이 채워짐 ease 는 색깔 보다는 크기요소를 바꿀때 효과적임.
  &:hover {
    background-color: cornflowerblue;
    // 카트에 담기 버튼에만 hover 했을 때 색 변화가 일어나고,
  }
  &--type {
    &-text {
      // <div
      //         class="button button--type-text"
      //       >
      //         더 보기
      //       </div>
      background-color: unset;
      color: blue;
      padding-inline: 0.5rem;
      //   좌우에 8px (0.5rem) 으로 수정
      transition: color 300ms ease;
      &:hover {
        background-color: unset;
        // 더보기 버튼은 unset으로 설정이 되지 않음
        color: cornflowerblue;
        // 더보기 글자에만 색상 적용 hover를 했을때
      }
    }
  }
}
.badge {
  position: absolute;
  // 자리를 차지하게 않게끔 사진 위에 숫자가 새겨짐
  right: -0.5rem;
  top: -0.5rem;
  // position: relative 인 친구가 없으니까 body까지 날라가 버림
  aspect-ratio: 1 / 1;
  // 1 ㄷ 1 비율로 만들기
  min-width: 1.25rem;
  // aspect-ratio 를 넣어줘도 원이 짜부가 됨 -> min-width 으로 원형을 맨들어 줘야함.
  width: fit-content;
  // div 는 가능한 가로를 꽉 채우려고 하는 속성을 가지고 있어, 그러지말고 숫자만큼의 사이즈에 맞추기 위함
  padding: 0.25rem;
  font-size: 0.6875rem;
  line-height: 0.75rem;
  font-weight: bold;
  background-color: red;
  color: rgba($color: #ffffff, $alpha: 0.87);
  border-radius: 62.4375rem;
  // 999px
  display: flex;
  justify-content: center;
  align-items: center;
  // 가운데 위치하게 함
}
